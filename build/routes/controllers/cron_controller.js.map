{"version":3,"sources":["../../../src/routes/controllers/cron_controller.js"],"names":["express","require","format","router","Router","Axios","stripe","process","env","STRIPE_SK_TEST","CronJob","Bottleneck","PotionBreak","UserGame","Game","GameScreenshot","GameMovie","potionBreakDailyCheck","dateToday","Date","query","select","from","where","join","potionBreakData","Promise","all","map","potionBreak","get","params","steamid","steam_id","key","STEAM_API_KEY","include_played_free_games","include_appinfo","game_id","then","response","data","games","userGameData","entries","i","userPreviousPlaytime","playtime_start","userCurrentPlaytime","playtime_forever","id","patch","status","playtime_end","payment_status","updatePotionBreakFailure","updatePotionBreakSuccess","user_id","potion_break_active","updateUserGame","successfulPotionBreaks","setupIntents","retrieve","setup_intent_id","setupIntent","paymentMethods","detach","payment_method","console","error","message","stripePaymentDailyCheck","unpaidPotionBreaks","total_value","paymentIntents","create","amount","currency","payment_method_types","customer","stripe_customer_id","off_session","confirm","error_on_requires_action","updatePaymentStatus","steamDataUpdate","gamesData","limiter","maxConcurrent","minTime","game","schedule","appids","timeNow","log","name","undefined","steam_appid","steamGameData","header_image","last_updated","updateGame","screenshots","length","screenshot","findById","checkScreenshot","insert","path_thumbnail","path_full","movies","movie","checkMovie","thumbnail","webm_480","webm","webm_max","mp4_480","mp4","mp4_max","module","exports"],"mappings":"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","sourcesContent":["const express = require(\"express\");\r\nvar format = require(\"date-fns/format\");\r\n\r\nconst router = express.Router();\r\nconst Axios = require(\"axios\");\r\nconst stripe = require(\"stripe\")(process.env.STRIPE_SK_TEST);\r\nconst { CronJob } = require(\"cron\");\r\n\r\nconst Bottleneck = require(\"bottleneck/es5\");\r\n\r\nconst PotionBreak = require(\"../../../models/potionBreak\");\r\nconst UserGame = require(\"../../../models/userGame\");\r\nconst Game = require(\"../../../models/game\");\r\nconst GameScreenshot = require(\"../../../models/gameScreenshot\");\r\nconst GameMovie = require(\"../../../models/gameMovie.js\");\r\n\r\n//  0 0 * * * - at midnight every night\r\n// 1-59/2 * * * * - odd minute for testing\r\nconst potionBreakDailyCheck = new CronJob(\"1-59/2 * * * *\", async () => {\r\n  try {\r\n    // get users who have potion break ending that night\r\n    const dateToday = format(new Date(), \"yyyy-MM-dd\");\r\n\r\n    const potionBreakData = await PotionBreak.query()\r\n      .select(\"potion_breaks.*\")\r\n      .from(\"potion_breaks\")\r\n      .where(\"potion_breaks.end_date\", \"=\", dateToday)\r\n      .where(\"potion_breaks.status\", \"=\", \"Ongoing\")\r\n      .join(\"users\", \"potion_breaks.user_id\", \"users.id\")\r\n      .select(\"users.steam_id\", \"users.stripe_customer_id\");\r\n\r\n    let userGameData = await Promise.all(\r\n      potionBreakData.map(async (potionBreak) => {\r\n        return await Axios.get(\r\n          \"https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/\",\r\n          {\r\n            params: {\r\n              steamid: potionBreak.steam_id,\r\n              key: process.env.STEAM_API_KEY,\r\n              include_played_free_games: true,\r\n              include_appinfo: true,\r\n              format: \"json\",\r\n              \"appids_filter[0]\": potionBreak.game_id,\r\n            },\r\n          }\r\n        ).then((response) => {\r\n          return response.data.response.games[0];\r\n        });\r\n      })\r\n    );\r\n\r\n    // https://thecodebarbarian.com/for-vs-for-each-vs-for-in-vs-for-of-in-javascript\r\n    for (const [i, potionBreak] of potionBreakData.entries()) {\r\n      const userPreviousPlaytime = potionBreak.playtime_start;\r\n      const userCurrentPlaytime = userGameData[i].playtime_forever;\r\n\r\n      // if user played (increase playtime) -> fail potion break\r\n      if (userPreviousPlaytime < userCurrentPlaytime) {\r\n        // update user game data\r\n        const updatePotionBreakFailure = await PotionBreak.query()\r\n          .where(\"id\", \"=\", potionBreak.id)\r\n          .patch({\r\n            status: \"Failure\",\r\n            playtime_end: userCurrentPlaytime,\r\n            payment_status: \"Unpaid\",\r\n          });\r\n      } else {\r\n        // if user hasn't played (same playtime) -> succeed potion break\r\n        const updatePotionBreakSuccess = await PotionBreak.query()\r\n          .where(\"id\", \"=\", potionBreak.id)\r\n          .patch({\r\n            status: \"Success\",\r\n            playtime_end: userCurrentPlaytime,\r\n            payment_status: \"N/A\",\r\n          });\r\n      }\r\n\r\n      // update user games owned status for each potion break\r\n      const updateUserGame = await UserGame.query()\r\n        .where(\"game_id\", \"=\", potionBreak.game_id)\r\n        .where(\"user_id\", \"=\", potionBreak.user_id)\r\n        .patch({\r\n          potion_break_active: \"false\",\r\n        });\r\n    }\r\n\r\n    // get successful potion breaks\r\n    const successfulPotionBreaks = await PotionBreak.query()\r\n      .select(\"potion_breaks.*\")\r\n      .from(\"potion_breaks\")\r\n      .where(\"potion_breaks.end_date\", \"=\", dateToday)\r\n      .where(\"potion_breaks.status\", \"=\", \"Success\")\r\n      .join(\"users\", \"potion_breaks.user_id\", \"users.id\")\r\n      .select(\"users.steam_id\", \"users.stripe_customer_id\");\r\n\r\n    // get setup intents from stripe\r\n    const setupIntents = await Promise.all(\r\n      successfulPotionBreaks.map(async (potionBreak) => {\r\n        return await stripe.setupIntents.retrieve(potionBreak.setup_intent_id);\r\n      })\r\n    );\r\n\r\n    // remove the payment methods tied to the setupIntents\r\n    // no longer need to charge them since the potion break was successful\r\n    for (const setupIntent of setupIntents) {\r\n      await stripe.paymentMethods.detach(setupIntent.payment_method);\r\n    }\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n\r\n// 5 0 * * * - at 12:05 every night\r\n// */2 * * * * - even minutes for testing\r\nconst stripePaymentDailyCheck = new CronJob(\"*/2 * * * *\", async () => {\r\n  // get failed potion breaks that haven't been paid yet\r\n  try {\r\n    const unpaidPotionBreaks = await PotionBreak.query()\r\n      .select(\"potion_breaks.*\")\r\n      .from(\"potion_breaks\")\r\n      .where(\"potion_breaks.status\", \"=\", \"Failure\")\r\n      .where(\"potion_breaks.payment_status\", \"=\", \"Unpaid\")\r\n      .join(\"users\", \"potion_breaks.user_id\", \"users.id\")\r\n      .select(\"users.steam_id\", \"users.stripe_customer_id\");\r\n\r\n    // get setup intents from stripe\r\n    const setupIntents = await Promise.all(\r\n      unpaidPotionBreaks.map(async (potionBreak) => {\r\n        potionBreak.total_value *= 100;\r\n        return await stripe.setupIntents.retrieve(potionBreak.setup_intent_id);\r\n      })\r\n    );\r\n\r\n    for (const [i, setupIntent] of setupIntents.entries()) {\r\n      await stripe.paymentIntents.create({\r\n        amount: unpaidPotionBreaks[i].total_value,\r\n        currency: \"cad\",\r\n        payment_method_types: [\"card\"],\r\n        customer: unpaidPotionBreaks[i].stripe_customer_id,\r\n        payment_method: setupIntent.payment_method,\r\n        off_session: true,\r\n        confirm: true,\r\n        error_on_requires_action: true,\r\n        // , mandate: true (TODO: NEED TO ADD)\r\n        // , receipt_email: potionBreak[i].user_email\r\n        // , on_behalf_of: USED FOR STRIPE CONNECT\r\n      });\r\n\r\n      // remove payment method after payment intent is created\r\n      await stripe.paymentMethods.detach(setupIntent.payment_method);\r\n\r\n      // update database to indicate users have paid\r\n      const updatePaymentStatus = await PotionBreak.query()\r\n        .where(\"setup_intent_id\", \"=\", setupIntent.id)\r\n        .patch({\r\n          payment_status: \"Paid\",\r\n        });\r\n    }\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n\r\n// run everyday at 1:00am\r\nconst steamDataUpdate = new CronJob(\"0 1 * * *\", async () => {\r\n  try {\r\n    // cron job to update steam game screenshots, movies, etc.\r\n    // get all games in db\r\n    const gamesData = await Game.query().select(\"id\", \"name\");\r\n\r\n    // use bottleneck's limiter to throttle api calls to 1/sec (1000ms)\r\n    const limiter = new Bottleneck({\r\n      maxConcurrent: 1,\r\n      minTime: 1000,\r\n    });\r\n\r\n    const steamGameData = await Promise.all(\r\n      gamesData.map(async (game) => {\r\n        return await limiter.schedule(() => {\r\n          return Axios.get(\"https://store.steampowered.com/api/appdetails\", {\r\n            params: {\r\n              appids: game.id,\r\n              format: \"json\",\r\n            },\r\n          }).then((response) => {\r\n            const timeNow = format(new Date());\r\n            console.log(`${game.name} - ${game.id} - ${timeNow}`);\r\n\r\n            // fix for games that cannot be queried by the store.steampowered api (such as dead island - 91310)\r\n            if (response.data[game.id].data === undefined) {\r\n              game.steam_appid = game.id;\r\n              return game;\r\n            } else {\r\n              return response.data[game.id].data;\r\n            }\r\n          });\r\n        });\r\n      })\r\n    );\r\n\r\n    const dateToday = format(new Date(), \"yyyy-MM-dd\");\r\n\r\n    for (const game of steamGameData) {\r\n      const updateGame = await Game.query()\r\n        .where(\"id\", \"=\", game.steam_appid)\r\n        .patch({\r\n          header_image: game?.header_image,\r\n          last_updated: dateToday,\r\n        });\r\n\r\n      if (game?.screenshots?.length !== 0 && game.screenshots) {\r\n        for (const screenshot of game.screenshots) {\r\n          // check if the this screenshot is already in the db\r\n          const checkScreenshot = await GameScreenshot.query().findById([\r\n            game.steam_appid,\r\n            screenshot.id,\r\n          ]);\r\n\r\n          // insert into db if it doesn't exist yet\r\n          if (checkScreenshot === undefined) {\r\n            await GameScreenshot.query().insert({\r\n              game_id: game.steam_appid,\r\n              id: screenshot.id,\r\n              path_thumbnail: screenshot.path_thumbnail,\r\n              path_full: screenshot.path_full,\r\n            });\r\n          } else {\r\n            // update the existing entry if it does exist\r\n            await GameScreenshot.query()\r\n              .findById([game.steam_appid, screenshot.id])\r\n              .patch({\r\n                path_thumbnail: screenshot?.path_thumbnail,\r\n                path_full: screenshot?.path_full,\r\n              });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (game?.movies?.length !== 0 && game.movies) {\r\n        for (const movie of game.movies) {\r\n          // check if the this movie is already in the db\r\n          const checkMovie = await GameMovie.query().findById([\r\n            game.steam_appid,\r\n            movie.id,\r\n          ]);\r\n\r\n          // insert into db if it doesn't exist yet\r\n          if (checkMovie === undefined) {\r\n            await GameMovie.query().insert({\r\n              game_id: game.steam_appid,\r\n              id: movie.id,\r\n              name: movie?.name,\r\n              thumbnail: movie?.thumbnail,\r\n              webm_480: movie?.webm?.[\"480\"],\r\n              webm_max: movie?.webm?.[\"max\"],\r\n              mp4_480: movie?.mp4?.[\"480\"],\r\n              mp4_max: movie?.mp4?.[\"max\"],\r\n            });\r\n          } else {\r\n            // update the existing entry if it does exist\r\n            await GameMovie.query()\r\n              .findById([game.steam_appid, movie.id])\r\n              .patch({\r\n                name: movie?.name,\r\n                thumbnail: movie?.thumbnail,\r\n                webm_480: movie?.webm?.[\"480\"],\r\n                webm_max: movie?.webm?.[\"max\"],\r\n                mp4_480: movie?.mp4?.[\"480\"],\r\n                mp4_max: movie?.mp4?.[\"max\"],\r\n              });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n\r\n// start cronjobs\r\n// potionBreakDailyCheck.start();\r\n// stripePaymentDailyCheck.start();\r\n// steamDataUpdate.start();\r\n\r\n// export routes up to routes.js\r\nmodule.exports = router;\r\n"],"file":"cron_controller.js"}