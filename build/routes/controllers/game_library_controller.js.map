{"version":3,"sources":["../../../src/routes/controllers/game_library_controller.js"],"names":["fs","require","format","Axios","express","checkLogin","router","Router","User","Game","UserGame","convertMinutesToHHMM","item","totalMinutes","playtime_forever","hours","Math","floor","minutes","total_time_played","get","req","res","userInfo","user","files","readdirSync","randomImage","random","length","first_load","query","select","from","leftJoin","where","id","userGameData","sort","a","b","parseFloat","game","potion_break_active","render","userSteamData","image","method","url","params","steamid","steam_id","key","process","env","STEAM_API_KEY","include_played_free_games","include_appinfo","then","response","data","ownedGames","dateToday","Date","games","playedGames","filter","total_steam_games_owned","game_count","total_steam_games_played","Object","keys","totalMinutesPlayed","total_minutes_played","findOne","patch","updateUser","findById","appid","withGraphFetched","getGame","undefined","insert","name","img_icon","img_icon_url","img_logo","img_logo_url","last_updated","insertGame","updateGame","getUserGame","user_id","game_id","insertUserGame","updateUserGame","console","error","message","module","exports"],"mappings":"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","sourcesContent":["const fs = require(\"fs\");\r\nconst format = require(\"date-fns/format\");\r\nconst Axios = require(\"axios\");\r\nconst express = require(\"express\");\r\nconst checkLogin = require(\"../../config/checkLoginMiddleware\");\r\n\r\nconst router = express.Router();\r\n\r\nconst User = require(\"../../../models/user\");\r\nconst Game = require(\"../../../models/game\");\r\nconst UserGame = require(\"../../../models/userGame\");\r\n\r\n// convert playtime from minutes to hours:minutes\r\nfunction convertMinutesToHHMM(item) {\r\n  const totalMinutes = item.playtime_forever;\r\n  const hours = Math.floor(totalMinutes / 60);\r\n  const minutes = totalMinutes - hours * 60;\r\n  if (hours === 0) {\r\n    item.total_time_played = `${minutes} minutes`;\r\n  } else {\r\n    item.total_time_played = `${hours} hours and ${minutes} minutes`;\r\n  }\r\n}\r\n\r\nrouter.get(\"/game-library\", checkLogin, async (req, res) => {\r\n  try {\r\n    // console.log(req.user);\r\n    const userInfo = req.user;\r\n\r\n    const files = fs.readdirSync(\"public/images/hero/game-library\");\r\n    const randomImage = files[Math.floor(Math.random() * files.length)];\r\n\r\n    // get user info from DB if this isn't the user's first time visiting this page after loading\r\n    if (req.user.first_load === false) {\r\n      const userGameData = await UserGame.query()\r\n        .select(\"*\")\r\n        .from(\"user_games\")\r\n        .leftJoin(\"games\", \"user_games.game_id\", \"games.id\")\r\n        .where(\"user_games.user_id\", \"=\", req.user.id);\r\n\r\n      userGameData.sort(function (a, b) {\r\n        return parseFloat(b.playtime_forever) - parseFloat(a.playtime_forever);\r\n      });\r\n\r\n      for (const game of userGameData) {\r\n        if (game.potion_break_active === \"true\") {\r\n          game.potion_break_active = \"disabled\";\r\n        } else if (game.potion_break_active === \"false\") {\r\n          game.potion_break_active = null;\r\n        }\r\n        convertMinutesToHHMM(game);\r\n      }\r\n\r\n      res.render(\"game-library\", {\r\n        user: req.user,\r\n        userSteamData: userGameData,\r\n        image: randomImage,\r\n      });\r\n    } else {\r\n      // if this is the user's first time visiting this page after logging in, query Steam API for updated data\r\n      // axios get request to API to get game information\r\n\r\n      const ownedGames = await Axios({\r\n        method: \"get\",\r\n        url: \"https://api.steampowered.com/IPlayerService/GetOwnedGames/v1/\",\r\n        params: {\r\n          steamid: userInfo.steam_id,\r\n          key: process.env.STEAM_API_KEY,\r\n          include_played_free_games: true,\r\n          include_appinfo: true,\r\n          format: \"json\",\r\n          // 'appids_filter[0]': 570,\r\n          // 'appids_filter[1]': 730\r\n        },\r\n      }).then((response) => {\r\n        return response.data.response;\r\n      });\r\n\r\n      const dateToday = format(new Date(), \"yyyy-MM-dd\");\r\n\r\n      // descending order in playtime\r\n      ownedGames.games.sort(function (a, b) {\r\n        return parseFloat(b.playtime_forever) - parseFloat(a.playtime_forever);\r\n      });\r\n\r\n      // remove games with no playtime\r\n      const playedGames = ownedGames.games.filter(function (game) {\r\n        return game.playtime_forever > 0;\r\n      });\r\n\r\n      for (const game of playedGames) {\r\n        convertMinutesToHHMM(game);\r\n      }\r\n\r\n      // get some additional player stats\r\n      // get total games owned\r\n      userInfo.total_steam_games_owned = ownedGames.game_count;\r\n\r\n      // get total games played\r\n      userInfo.total_steam_games_played = Object.keys(playedGames).length;\r\n\r\n      let totalMinutesPlayed = 0;\r\n\r\n      // get total minutes played\r\n      for (const game of playedGames) {\r\n        totalMinutesPlayed += game.playtime_forever;\r\n      }\r\n\r\n      userInfo.total_minutes_played = totalMinutesPlayed;\r\n      userInfo.total_time_played = `${Math.floor(\r\n        totalMinutesPlayed / 60\r\n      )} hours and ${\r\n        totalMinutesPlayed - Math.floor(totalMinutesPlayed / 60) * 60\r\n      } minutes`;\r\n\r\n      const updateUser = await User.query()\r\n        .findOne(\"id\", \"=\", req.user.id)\r\n        .patch({\r\n          total_steam_games_owned: userInfo.total_steam_games_owned,\r\n          total_steam_games_played: userInfo.total_steam_games_played,\r\n        });\r\n\r\n      for (const game of playedGames) {\r\n        const getGame = await Game.query()\r\n          .findById(game.appid)\r\n          .withGraphFetched(\"screenshots\")\r\n          .withGraphFetched(\"movies\");\r\n        // check if the games in playedGames exist in the games table\r\n        if (getGame === undefined) {\r\n          // if they don't add them\r\n          const insertGame = await Game.query().insert({\r\n            id: game.appid,\r\n            name: game.name,\r\n            img_icon: game.img_icon_url,\r\n            img_logo: game.img_logo_url,\r\n            last_updated: dateToday,\r\n          });\r\n        } else {\r\n          // if they do, update them\r\n          const updateGame = await Game.query().findById(game.appid).patch({\r\n            name: game.name,\r\n            img_icon: game.img_icon_url,\r\n            img_logo: game.img_logo_url,\r\n          });\r\n        }\r\n      }\r\n\r\n      for (const game of playedGames) {\r\n        const getUserGame = await UserGame.query().findById([\r\n          req.user.id,\r\n          game.appid,\r\n        ]);\r\n\r\n        // check if the games in playedGames exist in the user_games_owned table\r\n        if (getUserGame === undefined) {\r\n          // if they don't, add them\r\n          const insertUserGame = await UserGame.query().insert({\r\n            user_id: req.user.id,\r\n            game_id: game.appid,\r\n            playtime_forever: game.playtime_forever,\r\n          });\r\n        } else {\r\n          const updateUserGame = await UserGame.query()\r\n            .findById([req.user.id, game.appid])\r\n            .patch({\r\n              playtime_forever: game.playtime_forever,\r\n            });\r\n        }\r\n      }\r\n\r\n      const userGameData = await UserGame.query()\r\n        .select(\"*\")\r\n        .from(\"user_games\")\r\n        .leftJoin(\"games\", \"user_games.game_id\", \"games.id\")\r\n        .where(\"user_games.user_id\", \"=\", req.user.id);\r\n\r\n      userGameData.sort(function (a, b) {\r\n        return parseFloat(b.playtime_forever) - parseFloat(a.playtime_forever);\r\n      });\r\n\r\n      for (const game of userGameData) {\r\n        if (game.potion_break_active === \"true\") {\r\n          game.potion_break_active = \"disabled\";\r\n        } else if (game.potion_break_active === \"false\") {\r\n          game.potion_break_active = null;\r\n        }\r\n        convertMinutesToHHMM(game);\r\n      }\r\n\r\n      res.render(\"game-library\", {\r\n        user: req.user,\r\n        userSteamData: userGameData,\r\n        image: randomImage,\r\n      });\r\n    }\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n\r\n// export routes up to routes.js\r\nmodule.exports = router;\r\n"],"file":"game_library_controller.js"}