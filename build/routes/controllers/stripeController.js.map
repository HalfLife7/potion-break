{"version":3,"sources":["../../../src/routes/controllers/stripeController.js"],"names":["express","require","stripe","process","env","STRIPE_SK_TEST","router","Router","User","get","req","res","send","publicKey","STRIPE_PK_TEST","post","query","findById","user","id","select","stripe_customer_id","customers","create","description","steam_id","newCustomer","patch","updateUser","console","error","message","userStripeId","retrieve","stripeCustomer","setupIntents","customer","setupIntent","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBE,OAAO,CAACC,GAAR,CAAYC,cAA9B,CAAf;;AAEA,IAAMC,MAAM,GAAGN,OAAO,CAACO,MAAR,EAAf;;AAEA,IAAMC,IAAI,GAAGP,OAAO,CAAC,sBAAD,CAApB;;AAEAK,MAAM,CAACG,GAAP,CAAW,aAAX,EAA0B,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAC5CA,EAAAA,GAAG,CAACC,IAAJ,CAAS;AACPC,IAAAA,SAAS,EAAEV,OAAO,CAACC,GAAR,CAAYU;AADhB,GAAT;AAGD,CAJD;AAMAR,MAAM,CAACS,IAAP,CAAY,yBAAZ;AAAA,2FAAuC,iBAAOL,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAKhBF,IAAI,CAACQ,KAAL,GAChBC,QADgB,CACPP,GAAG,CAACQ,IAAJ,CAASC,EADF,EAEhBC,MAFgB,CAET,oBAFS,CALgB;;AAAA;AAK7BF,YAAAA,IAL6B;;AAAA,kBAU/BA,IAAI,CAACG,kBAAL,KAA4B,IAVG;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYPnB,MAAM,CAACoB,SAAP,CAAiBC,MAAjB,CAAwB;AAChDC,cAAAA,WAAW,EAAEd,GAAG,CAACQ,IAAJ,CAASO;AAD0B,aAAxB,CAZO;;AAAA;AAY3BC,YAAAA,WAZ2B;AAAA;AAAA,mBAiBRlB,IAAI,CAACQ,KAAL,GAAaC,QAAb,CAAsBP,GAAG,CAACQ,IAAJ,CAASC,EAA/B,EAAmCQ,KAAnC,CAAyC;AAChEN,cAAAA,kBAAkB,EAAEK,WAAW,CAACP;AADgC,aAAzC,CAjBQ;;AAAA;AAiB3BS,YAAAA,UAjB2B;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwBnCC,YAAAA,OAAO,CAACC,KAAR,CAAc,YAAIC,OAAlB;;AAxBmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvC;;AAAA;AAAA;AAAA;AAAA;AA4BAzB,MAAM,CAACS,IAAP,CAAY,sBAAZ;AAAA,4FAAoC,kBAAOL,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAILH,IAAI,CAACQ,KAAL,GACxBC,QADwB,CACfP,GAAG,CAACQ,IAAJ,CAASC,EADM,EAExBC,MAFwB,CAEjB,oBAFiB,CAJK;;AAAA;AAI1BY,YAAAA,YAJ0B;AAAA;AAAA,mBAOH9B,MAAM,CAACoB,SAAP,CAAiBW,QAAjB,CAC3BD,YAAY,CAACX,kBADc,CAPG;;AAAA;AAO1Ba,YAAAA,cAP0B;AAAA;AAAA,mBAUNhC,MAAM,CAACiC,YAAP,CAAoBZ,MAApB,CAA2B;AACnDa,cAAAA,QAAQ,EAAEF,cAAc,CAACf;AAD0B,aAA3B,CAVM;;AAAA;AAU1BkB,YAAAA,WAV0B;AAahC1B,YAAAA,GAAG,CAACC,IAAJ,CAAS;AACPyB,cAAAA,WAAW,EAAXA;AADO,aAAT;AAbgC;AAAA;;AAAA;AAAA;AAAA;AAiBhCR,YAAAA,OAAO,CAACC,KAAR,CAAc,aAAIC,OAAlB;;AAjBgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAApC;;AAAA;AAAA;AAAA;AAAA,K,CAqBA;;AACAO,MAAM,CAACC,OAAP,GAAiBjC,MAAjB","sourcesContent":["const express = require(\"express\");\r\nconst stripe = require(\"stripe\")(process.env.STRIPE_SK_TEST);\r\n\r\nconst router = express.Router();\r\n\r\nconst User = require(\"../../../models/user\");\r\n\r\nrouter.get(\"/public-key\", function (req, res) {\r\n  res.send({\r\n    publicKey: process.env.STRIPE_PK_TEST,\r\n  });\r\n});\r\n\r\nrouter.post(\"/create-stripe-customer\", async (req) => {\r\n  // Create or use an existing Customer to associate with the SetupIntent.\r\n  // The PaymentMethod will be stored to this Customer for later use.\r\n\r\n  try {\r\n    const user = await User.query()\r\n      .findById(req.user.id)\r\n      .select(\"stripe_customer_id\");\r\n\r\n    // if nothing is returned, create a new customer and tie it to the user\r\n    if (user.stripe_customer_id === null) {\r\n      // create customer\r\n      const newCustomer = await stripe.customers.create({\r\n        description: req.user.steam_id,\r\n      });\r\n\r\n      // update user with stripe details\r\n      const updateUser = await User.query().findById(req.user.id).patch({\r\n        stripe_customer_id: newCustomer.id,\r\n      });\r\n    } else {\r\n      // do nothin since user is already tied to a stripe customer\r\n    }\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n\r\nrouter.post(\"/create-setup-intent\", async (req, res) => {\r\n  try {\r\n    // use an existing Customer to associate with the SetupIntent.\r\n    // The PaymentMethod will be stored to this Customer for later use.\r\n    const userStripeId = await User.query()\r\n      .findById(req.user.id)\r\n      .select(\"stripe_customer_id\");\r\n    const stripeCustomer = await stripe.customers.retrieve(\r\n      userStripeId.stripe_customer_id\r\n    );\r\n    const setupIntent = await stripe.setupIntents.create({\r\n      customer: stripeCustomer.id,\r\n    });\r\n    res.send({\r\n      setupIntent,\r\n    });\r\n  } catch (err) {\r\n    console.error(err.message);\r\n  }\r\n});\r\n\r\n// export routes up to routes.js\r\nmodule.exports = router;\r\n"],"file":"stripeController.js"}