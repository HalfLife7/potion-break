{"version":3,"sources":["../src/index.js"],"names":["process","env","NODE_ENV","require","config","express","session","MemoryStore","bodyParser","path","mustacheExpress","passport","SteamStrategy","Strategy","User","serializeUser","user","done","deserializeUser","obj","returnURL","BASE_URL","realm","console","log","use","apiKey","STEAM_API_KEY","identifier","profile","nextTick","userInfo","personaname","_json","profileurl","steamid","avatarfull","getUser","query","findOne","then","err","error","message","insertUser","insert","steam_persona_name","steam_profile","steam_id","steam_avatar","updateUser","patch","undefined","results","app","urlencoded","extended","json","viewsPath","join","__dirname","viewsPages","engine","set","cookie","maxAge","resave","saveUninitialized","store","checkPeriod","secret","SESSION_SECRET","initialize","routes","port","PORT","server","listen"],"mappings":"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","sourcesContent":["// .env workaround for heroku\r\n// https:stackoverflow.com/questions/59759085/heroku-failed-to-load-env\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  require(\"dotenv\").config();\r\n}\r\nconst express = require(\"express\");\r\nconst session = require(\"express-session\");\r\nvar MemoryStore = require(\"memorystore\")(session);\r\nconst bodyParser = require(\"body-parser\");\r\nconst path = require(\"path\");\r\nconst mustacheExpress = require(\"mustache-express\");\r\nconst passport = require(\"passport\");\r\nconst SteamStrategy = require(\"../lib/passport-steam/index.js\").Strategy;\r\n\r\nconst User = require(\"../models/user\");\r\n\r\n// TODO: update stripe API to use the newset version (currently using 2019-11-05, newest is 2020-03-02)\r\n// TODO: create automated test cases\r\n\r\n// Passport session setup.\r\n//   To support persistent login sessions, Passport needs to be able to\r\n//   serialize users into and deserialize users out of the session.  Typically,\r\n//   this will be as simple as storing the user ID when serializing, and finding\r\n//   the user by ID when deserializing.  However, since this example does not\r\n//   have a database of user records, the complete Steam profile is serialized\r\n//   and deserialized.\r\npassport.serializeUser(function (user, done) {\r\n  done(null, user);\r\n});\r\n\r\npassport.deserializeUser(function (obj, done) {\r\n  done(null, obj);\r\n});\r\n\r\n// Use the SteamStrategy within Passport.\r\n//   Strategies in passport require a `validate` function, which accept\r\n//   credentials (in this case, an OpenID identifier and profile), and invoke a\r\n//   callback with a user object.\r\n\r\nconst returnURL = process.env.BASE_URL + \"/auth/steam/return\";\r\nconst realm = process.env.BASE_URL;\r\n\r\nconsole.log(returnURL);\r\nconsole.log(realm);\r\n\r\npassport.use(\r\n  new SteamStrategy(\r\n    {\r\n      returnURL: returnURL,\r\n      realm: realm,\r\n      apiKey: process.env.STEAM_API_KEY,\r\n    },\r\n    function (identifier, profile, done) {\r\n      // asynchronous verification, for effect...\r\n      process.nextTick(function () {\r\n        // console.log(profile._json);\r\n        const userInfo = {\r\n          personaname: profile._json.personaname,\r\n          profileurl: profile._json.profileurl,\r\n          steamid: profile._json.steamid,\r\n          avatarfull: profile._json.avatarfull,\r\n        };\r\n\r\n        // To keep the example simple, the user's Steam profile is returned to\r\n        // represent the logged-in user.\r\n        // TODO: Add support/functionality for other platforms such as Blizzard's Battle.net\r\n        // Associate the Steam account with a user record in your database,\r\n        // and return that user instead in case they have other connections.\r\n        function getUser() {\r\n          return User.query()\r\n            .findOne(\"steam_id\", \"=\", userInfo.steamid)\r\n            .then((user) => {\r\n              return user;\r\n            })\r\n            .catch((err) => {\r\n              console.error(err.message);\r\n            });\r\n        }\r\n\r\n        function insertUser() {\r\n          return User.query()\r\n            .insert({\r\n              steam_persona_name: userInfo.personaname,\r\n              steam_profile: userInfo.profileurl,\r\n              steam_id: userInfo.steamid,\r\n              steam_avatar: userInfo.avatarfull,\r\n            })\r\n            .then((user) => {\r\n              return user;\r\n            })\r\n            .catch((err) => {\r\n              console.error(err.message);\r\n            });\r\n        }\r\n\r\n        function updateUser() {\r\n          return User.query()\r\n            .findOne(\"steam_id\", \"=\", userInfo.steamid)\r\n            .patch({\r\n              steam_persona_name: userInfo.personaname,\r\n              steam_profile: userInfo.profileurl,\r\n              steam_avatar: userInfo.avatarfull,\r\n            })\r\n            .then((user) => {\r\n              return `Successfully updated User ID: ${user}`;\r\n            })\r\n            .catch((err) => {\r\n              console.error(err.message);\r\n            });\r\n        }\r\n\r\n        // check if user exists\r\n        getUser()\r\n          .then((user) => {\r\n            if (user === undefined) {\r\n              // if user does not exist, insert new\r\n              return insertUser();\r\n            }\r\n            // if user does exist, update\r\n            return updateUser();\r\n          })\r\n          .then(() => {\r\n            // get user data at the end\r\n            return getUser();\r\n          })\r\n          .then((results) => {\r\n            return done(null, results);\r\n          });\r\n      });\r\n    }\r\n  )\r\n);\r\n\r\nconst app = express();\r\n\r\n// parse application/x-www-form-urlencoded\r\napp.use(\r\n  bodyParser.urlencoded({\r\n    extended: true,\r\n  })\r\n);\r\n\r\n// parse application/json\r\napp.use(bodyParser.json());\r\n\r\n// set view paths\r\nconst viewsPath = path.join(__dirname, \"../views\");\r\nconst viewsPages = path.join(__dirname, \"../views/pages\");\r\n\r\napp.engine(\"mustache\", mustacheExpress(`${viewsPath}/partials`, \".mustache\"));\r\napp.set(\"view engine\", \"mustache\");\r\napp.set(\"views\", [viewsPath, viewsPages]);\r\n\r\n// app.enable(\"trust proxy\");\r\n\r\n// start session\r\napp.use(\r\n  session({\r\n    cookie: { maxAge: 86400000 },\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    store: new MemoryStore({\r\n      checkPeriod: 86400000, // prune expired entries every 24h\r\n    }),\r\n    secret: process.env.SESSION_SECRET,\r\n  })\r\n);\r\n\r\n// Initialize Passport!  Also use passport.session() middleware, to support\r\n// persistent login sessions (recommended).\r\napp.use(passport.initialize());\r\napp.use(passport.session());\r\napp.use(express.static(path.join(__dirname, \"../public\")));\r\n\r\n// load routes\r\nconst routes = require(\"./routes/index\");\r\n\r\napp.use(\"/\", routes);\r\nconst port = process.env.PORT || 8000;\r\n\r\nconst server = app.listen(port, () => {\r\n  console.log(`Server listening on port ${port}`);\r\n});\r\n"],"file":"index.js"}