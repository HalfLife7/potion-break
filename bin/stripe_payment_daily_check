#!/usr/bin/env node

const stripe = require("stripe")(process.env.STRIPE_SK_TEST);

const PotionBreak = require("../models/potionBreak");

async function stripePaymentDailyCheck() {
  try {
    const unpaidPotionBreaks = await PotionBreak.query()
      .select("potion_breaks.*")
      .from("potion_breaks")
      .where("potion_breaks.status", "=", "Failure")
      .where("potion_breaks.payment_status", "=", "Unpaid")
      .join("users", "potion_breaks.user_id", "users.id")
      .select("users.steam_id", "users.stripe_customer_id");

    // get setup intents from stripe
    const setupIntents = await Promise.all(
      unpaidPotionBreaks.map(async (potionBreak) => {
        potionBreak.total_value *= 100;
        return await stripe.setupIntents.retrieve(potionBreak.setup_intent_id);
      })
    );

    for (const [i, setupIntent] of setupIntents.entries()) {
      await stripe.paymentIntents.create({
        amount: unpaidPotionBreaks[i].total_value,
        currency: "cad",
        payment_method_types: ["card"],
        customer: unpaidPotionBreaks[i].stripe_customer_id,
        payment_method: setupIntent.payment_method,
        off_session: true,
        confirm: true,
        error_on_requires_action: true,
        // , mandate: true (TODO: NEED TO ADD)
        // , receipt_email: potionBreak[i].user_email
        // , on_behalf_of: USED FOR STRIPE CONNECT
      });

      // remove payment method after payment intent is created
      await stripe.paymentMethods.detach(setupIntent.payment_method);

      // update database to indicate users have paid
      const updatePaymentStatus = await PotionBreak.query()
        .where("setup_intent_id", "=", setupIntent.id)
        .patch({
          payment_status: "Paid",
        });
    }
    process.exit();
  } catch (err) {
    console.error(err.message);
  }
}

stripePaymentDailyCheck();
